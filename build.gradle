plugins {
    id 'java'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

group = 'io.github.steelwoolmc'
version = version + '+' + minecraft_version

java {
    withSourcesJar()
}

minecraft {
    mappings channel: 'official', version: minecraft_version
    runs {
        configureEach {
            workingDirectory project.file('run')
        }
        client {}
    }
}

configurations {
    shadedImplementation { transitive = false }
    fabricMixin { transitive = false }
    implementation.extendsFrom(shadedImplementation)
    compileOnly.extendsFrom(fabricMixin)
}

processResources {
    inputs.property('version', project.version)
    expand([version: project.version])
}

repositories {
    maven {
        name = 'Fabric'
        url = 'https://maven.fabricmc.net/'
    }
    maven {
        name = 'Sinytra'
        url = 'https://maven.su5ed.dev/releases/'
    }
}

final fullJar = tasks.register("fullJar", org.gradle.jvm.tasks.Jar)

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    fabricMixin "dev.su5ed.sinytra:sponge-mixin:${mixin_version}"
    runtimeOnly(files(fullJar.map { it.archiveFile }))
}

jar {
    archiveClassifier = "slim"
}

shadowJar {
    from("licenses") {
        into "META-INF/"
    }
    from("LICENSE.txt") {
        into "META-INF/"
    }
    // Exclude dependency licenses since we include them ourselves
    exclude "**/LICENSE*"
    exclude "**/NOTICE*"
    exclude "META-INF/maven/**"
    exclude "META-INF/versions/**"

    archiveClassifier = "shadow"
    configurations = [project.configurations.shadedImplementation]
}

fullJar.configure {
    dependsOn(shadowJar)
    manifest.from(jar.manifest)
    from(zipTree(shadowJar.archiveFile))
    from(provider { configurations.fabricMixin.singleFile }) {
        rename { "fabric-mixin.jar" }
    }
    archiveClassifier = ""
}

assemble.dependsOn fullJar

// Replace published jar artifact with shadowJar 
configurations {
    [runtimeElements, apiElements].each {
        it.outgoing {
            artifacts.clear()
            artifact(fullJar)
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            // Remove forge dependency from pom, disable gradle module metadata
            fg.component it
        }
    }
    def ENV = System.getenv()
    if (ENV.MAVEN_URL) {
        repositories.maven {
            url ENV.MAVEN_URL
            if (ENV.MAVEN_USERNAME) {
                credentials {
                    username ENV.MAVEN_USERNAME
                    password ENV.MAVEN_PASSWORD
                }
            }
        }
    }
}
